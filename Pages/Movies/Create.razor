@page "/movies/create/"
<PageTitle>Create Movie</PageTitle>

@using BlazorApp.Data
@using BlazorApp.DataAccess
@inject MemoryDatabase MemoryDatabase
@inject NavigationManager NavigationManager

<h1>Create Movie</h1>
<form>
   <div class="form-group">
       <label for="title">Título</label>
       <input type="text" class="form-control" id="title" @bind="currentMovie.Title" />
   </div>
   <div class="form-group">
       <label for="director">Director</label>
       <input type="text" class="form-control" id="director" @bind="currentMovie.Director" />
   </div>
   <div class="form-group">
       <label for="releaseYear">Año de lanzamiento</label>
       <input type="number" class="form-control" id="releaseYear" @bind="currentMovie.ReleaseYear" />
   </div>
   <div class="form-group">
        <label for="Category">Category</label>
        <select class="form-control" @onchange="OnChangeCategory" >
            <option disable selected value="">Select Category</option>
            @foreach (var category in categories){
                <option value="@category.Id">
                    @category.Name
                </option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="actor">Select Actors</label>
        <select multiple class="form-control" id="actos" @onchange="OnChangeActors" >
            @foreach (var actor in actors)
            {
                <option value="@actor.Id">
                    @actor.Name
                </option>
            }
        </select>
    </div>

   <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
   <a href="/movies">Cancelar</a>
</form>

@code{
   private Movie? currentMovie;
   private MoviesRepository moviesRepository;

    private CategoriesRepository categoriesRepository;
    private List<Category>? categories;

    private ActorsRepository actorsRepository;
    private List<Actor>? actors;
    private List<int> selectedActorIds = new List<int>();

   protected override void OnInitialized()
   {
        moviesRepository = new MoviesRepository(MemoryDatabase);
        currentMovie = new Movie();
        currentMovie.ReleaseYear= DateTime.Now.Year;

        categoriesRepository = new CategoriesRepository(MemoryDatabase);
        categories = categoriesRepository.GetAll();

        actorsRepository = new ActorsRepository(MemoryDatabase);
        actors = actorsRepository.GetAll();
   }
   
   public void OnChangeActors(ChangeEventArgs e){
        var actorsIdsString = (string[])e.Value;
        var actors = new List<Actor>();
        foreach (var stringId in actorsIdsString)
        {
            var actor = actorsRepository.Find(int.Parse(stringId));
            actors.Add(actor);
        }
        currentMovie.Actors = actors;
    }

    public void OnChangeCategory(ChangeEventArgs e){
        int catId = int.Parse(e.Value.ToString());
        currentMovie.Category = categoriesRepository.Find(catId);
    }

   private void SaveChanges()
   {
       moviesRepository.Create(currentMovie);
       NavigationManager.NavigateTo("/movies");
   }

}